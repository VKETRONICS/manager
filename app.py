# app.py
import os, hmac, hashlib
from fastapi import FastAPI, Request, HTTPException
from dotenv import load_dotenv
load_dotenv()

from config import load_config
from db import init_db
from scheduler import scheduler, init_jobs

from telebot import TeleBot, types
from bot.ui import main_menu, back_kb

# –∫–æ—Ä–Ω–µ–≤—ã–µ —Ä–æ—É—Ç—ã (/, /healthz, /debug/*)
from routes_root import router as root_router

cfg = load_config()
app = FastAPI(title="ETRONICS Community Bot")

# –ë–î –∏ —Ä–æ—É—Ç—ã
init_db()
app.include_router(root_router)

# --- Telegram bot ---
bot = TeleBot(cfg.TELEGRAM_BOT_TOKEN, parse_mode="HTML")

@bot.message_handler(commands=["start"])
def start(m: types.Message):
    bot.send_message(m.chat.id, "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda c: True)
def callbacks(c: types.CallbackQuery):
    data = c.data
    if data == "status":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ê–≤—Ç–æ–ø–∏–ª–æ—Ç: ‚úÖ\n–£–¥–∞–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: 0\n–ö–∞—Ä–∞–Ω—Ç–∏–Ω: 0",
                              reply_markup=back_kb("back_main"))
    elif data == "members":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ 0 / —É–¥–∞–ª–µ–Ω–æ 0 / –∫–∞—Ä–∞–Ω—Ç–∏–Ω 0",
                              reply_markup=back_kb("back_main"))
    elif data == "likes":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ê–Ω—Ç–∏-–ª–∞–π–∫–∏: –∑–∞ —Å—É—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ 0 / —É–¥–∞–ª–µ–Ω–æ 0 / –∫–∞—Ä–∞–Ω—Ç–∏–Ω 0",
                              reply_markup=back_kb("back_main"))
    elif data == "comments":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ê–Ω—Ç–∏-–∫–æ–º–º–µ–Ω—Ç—ã: –∑–∞ —Å—É—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ 0 / —É–¥–∞–ª–µ–Ω–æ 0 / –∫–∞—Ä–∞–Ω—Ç–∏–Ω 0",
                              reply_markup=back_kb("back_main"))
    elif data == "quarantine":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ö–∞—Ä–∞–Ω—Ç–∏–Ω (–æ–±—â–∏–π): 0 –∑–∞–ø–∏—Å–µ–π",
                              reply_markup=back_kb("back_main"))
    elif data == "ads":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="üíº –†–µ–∫–ª–∞–º–∞: –Ω–æ–≤—ã–µ –ª–∏–¥—ã 0",
                              reply_markup=back_kb("back_main"))
    elif data == "settings":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–∏–Ω–∏–º—É–º):\n‚Äî –ê–ª–µ—Ä—Ç—ã: –í–∫–ª\n‚Äî –ö–∞—Ä–∞–Ω—Ç–∏–Ω: 24—á",
                              reply_markup=back_kb("back_main"))
    elif data == "back_main":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=main_menu())

# --- Webhook: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π ---
@app.post("/tg/webhook")
async def tg_webhook(request: Request):
    body = await request.body()
    update = types.Update.de_json(body.decode("utf-8"))
    bot.process_new_updates([update])
    return {"ok": True}

# –ë—ã—Å—Ç—Ä—ã–π –ø–∏–Ω–≥ –≤ TG (–ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω/—á–∞—Ç)
import httpx
@app.get("/debug/ping_tg")
async def debug_ping_tg():
    chat_id = os.getenv("TELEGRAM_ADMIN_CHAT_ID", "")
    token = os.getenv("TELEGRAM_BOT_TOKEN", "")
    if not (chat_id and token):
        return {"ok": False, "err": "TELEGRAM_* envs missing"}
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {"chat_id": chat_id, "text": "–ë–æ—Ç –∂–∏–≤. –í–æ—Ç –º–µ–Ω—é ‚Üì", "reply_markup": main_menu().to_dic()}
    async with httpx.AsyncClient(timeout=10) as client:
        r = await client.post(url, json=payload)
        data = r.json()
    return {"ok": True, "tg": data}

# health (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, –¥—É–±–ª–∏ –Ω–µ –ª–æ–º–∞—é—Ç)
@app.get("/health")
def health():
    return {"ok": True}

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (digest –∏ –ø—Ä.)
@app.on_event("startup")
def on_startup():
    init_jobs()
    scheduler.start()

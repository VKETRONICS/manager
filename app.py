import hmac, hashlib
from fastapi import FastAPI, Request, HTTPException
from dotenv import load_dotenv
load_dotenv()

from config import load_config
from db import init_db
from scheduler import scheduler, init_jobs
from telebot import TeleBot, types
from bot.ui import main_menu, back_kb

cfg = load_config()
app = FastAPI(title="ETRONICS Community Bot")
init_db()

bot = TeleBot(cfg.TELEGRAM_BOT_TOKEN, parse_mode="HTML")

@app.on_event("startup")
def on_startup():
    init_jobs()
    scheduler.start()

@app.get("/health")
def health():
    return {"ok": True}

@app.post("/tg/webhook")
async def tg_webhook(request: Request):
    body = await request.body()
    if cfg.WEBHOOK_SECRET:
        sig = request.headers.get("X-Telegram-Signature") or ""
        want = hmac.new(cfg.WEBHOOK_SECRET.encode(), body, hashlib.sha256).hexdigest()
        if not hmac.compare_digest(sig, want):
            raise HTTPException(status_code=401, detail="bad signature")
    update = types.Update.de_json(body.decode("utf-8"))
    bot.process_new_updates([update])
    return {"ok": True}

# ----- Telegram UI handlers (skeleton) -----
@bot.message_handler(commands=["start"])
def start(m: types.Message):
    bot.send_message(m.chat.id, "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda c: True)
def callbacks(c: types.CallbackQuery):
    data = c.data
    if data == "status":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ê–≤—Ç–æ–ø–∏–ª–æ—Ç: ‚úÖ\n–£–¥–∞–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: 0\n–ö–∞—Ä–∞–Ω—Ç–∏–Ω: 0",
                              reply_markup=back_kb("back_main"))
    elif data == "members":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ 0 / —É–¥–∞–ª–µ–Ω–æ 0 / –∫–∞—Ä–∞–Ω—Ç–∏–Ω 0",
                              reply_markup=back_kb("back_main"))
    elif data == "likes":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ê–Ω—Ç–∏-–ª–∞–π–∫–∏: –∑–∞ —Å—É—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ 0 / —É–¥–∞–ª–µ–Ω–æ 0 / –∫–∞—Ä–∞–Ω—Ç–∏–Ω 0",
                              reply_markup=back_kb("back_main"))
    elif data == "comments":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ê–Ω—Ç–∏-–∫–æ–º–º–µ–Ω—Ç—ã: –∑–∞ —Å—É—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ 0 / —É–¥–∞–ª–µ–Ω–æ 0 / –∫–∞—Ä–∞–Ω—Ç–∏–Ω 0",
                              reply_markup=back_kb("back_main"))
    elif data == "quarantine":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ö–∞—Ä–∞–Ω—Ç–∏–Ω (–æ–±—â–∏–π): 0 –∑–∞–ø–∏—Å–µ–π",
                              reply_markup=back_kb("back_main"))
    elif data == "ads":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="üíº –†–µ–∫–ª–∞–º–∞: –Ω–æ–≤—ã–µ –ª–∏–¥—ã 0",
                              reply_markup=back_kb("back_main"))
    elif data == "settings":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–∏–Ω–∏–º—É–º):\n‚Äî –ê–ª–µ—Ä—Ç—ã: –í–∫–ª\n‚Äî –ö–∞—Ä–∞–Ω—Ç–∏–Ω: 24—á",
                              reply_markup=back_kb("back_main"))
    elif data == "back_main":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=main_menu())

# NOTE: On Render, set webhook via https://api.telegram.org/bot<TOKEN>/setWebhook?url=<PUBLIC_BASE_URL>/tg/webhook

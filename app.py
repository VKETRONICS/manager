# app.py
import os, hmac, hashlib, asyncio
from fastapi import FastAPI, Request, HTTPException
from dotenv import load_dotenv
load_dotenv()

from config import load_config
from db import init_db
from scheduler import scheduler, init_jobs

from telebot import TeleBot, types
from bot.ui import main_menu, back_kb, likes_kb   # ‚úÖ –¥–æ–±–∞–≤–∏–ª–∏ likes_kb
from modules.anti_likes import run_anti_likes_once  # ‚úÖ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

# –∫–æ—Ä–Ω–µ–≤—ã–µ —Ä–æ—É—Ç—ã (/, /healthz, /debug/*)
from routes_root import router as root_router

cfg = load_config()
app = FastAPI(title="ETRONICS Community Bot")

# –ë–î –∏ —Ä–æ—É—Ç—ã
init_db()
app.include_router(root_router)

# --- Telegram bot ---
bot = TeleBot(cfg.TELEGRAM_BOT_TOKEN, parse_mode="HTML")

@bot.message_handler(commands=["start"])
def start(m: types.Message):
    bot.send_message(m.chat.id, "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda c: True)
def callbacks(c: types.CallbackQuery):
    data = c.data
    if data == "status":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ê–≤—Ç–æ–ø–∏–ª–æ—Ç: ‚úÖ\n–£–¥–∞–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: 0\n–ö–∞—Ä–∞–Ω—Ç–∏–Ω: 0",
                              reply_markup=back_kb("back_main"))
    elif data == "members":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ 0 / —É–¥–∞–ª–µ–Ω–æ 0 / –∫–∞—Ä–∞–Ω—Ç–∏–Ω 0",
                              reply_markup=back_kb("back_main"))
    elif data == "likes":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ê–Ω—Ç–∏-–ª–∞–π–∫–∏: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á—ë–Ω.\n"
                                   "–ú–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä—É—á–Ω—É—é –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
                              reply_markup=likes_kb())  # ‚úÖ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å 2 –∫–Ω–æ–ø–∫–∞–º–∏
    elif data == "run_anti_likes":
        if str(c.from_user.id) != str(cfg.TELEGRAM_ADMIN_CHAT_ID):
            bot.answer_callback_query(c.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        else:
            bot.answer_callback_query(c.id)
            bot.edit_message_text(chat_id=c.message.chat.id,
                                  message_id=c.message.message_id,
                                  text="üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∞–π–∫–æ–≤‚Ä¶",
                                  reply_markup=back_kb("back_main"))
            try:
                result = asyncio.run(run_anti_likes_once())
                if result.get("ok"):
                    checked = result.get("checked", 0)
                    banned = result.get("banned", 0)
                    quarantine = result.get("quarantine", 0)
                    posts = result.get("posts", 0)
                    text = (f"üëç –ì–æ—Ç–æ–≤–æ.\n"
                            f"–ü–æ—Å—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {posts}\n"
                            f"–õ–∞–π–∫–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked}\n"
                            f"–£–¥–∞–ª–µ–Ω–æ: {banned}\n"
                            f"–ö–∞—Ä–∞–Ω—Ç–∏–Ω: {quarantine}\n\n"
                            f"–†–µ–∂–∏–º: {'–±–æ–µ–≤–æ–π' if os.getenv('ANTI_LIKES_BAN_ENABLED','false').lower()=='true' else 'dry-run'}")
                else:
                    text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {result.get('error','unknown')}"
            except Exception as e:
                text = f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}"

            bot.edit_message_text(chat_id=c.message.chat.id,
                                  message_id=c.message.message_id,
                                  text=text,
                                  reply_markup=likes_kb())  # ‚úÖ –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ê–Ω—Ç–∏-–ª–∞–π–∫–∏¬ª
    elif data == "comments":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ê–Ω—Ç–∏-–∫–æ–º–º–µ–Ω—Ç—ã: –∑–∞ —Å—É—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ 0 / —É–¥–∞–ª–µ–Ω–æ 0 / –∫–∞—Ä–∞–Ω—Ç–∏–Ω 0",
                              reply_markup=back_kb("back_main"))
    elif data == "quarantine":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ö–∞—Ä–∞–Ω—Ç–∏–Ω (–æ–±—â–∏–π): 0 –∑–∞–ø–∏—Å–µ–π",
                              reply_markup=back_kb("back_main"))
    elif data == "ads":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="üíº –†–µ–∫–ª–∞–º–∞: –Ω–æ–≤—ã–µ –ª–∏–¥—ã 0",
                              reply_markup=back_kb("back_main"))
    elif data == "settings":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–∏–Ω–∏–º—É–º):\n‚Äî –ê–ª–µ—Ä—Ç—ã: –í–∫–ª\n‚Äî –ö–∞—Ä–∞–Ω—Ç–∏–Ω: 24—á",
                              reply_markup=back_kb("back_main"))
    elif data == "back_main":
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                              text="–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=main_menu())

# --- Webhook ---
@app.post("/tg/webhook")
async def tg_webhook(request: Request):
    body = await request.body()
    update = types.Update.de_json(body.decode("utf-8"))
    bot.process_new_updates([update])
    return {"ok": True}

# health (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ)
@app.get("/health")
def health():
    return {"ok": True}

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
@app.on_event("startup")
def on_startup():
    init_jobs()
    scheduler.start()
